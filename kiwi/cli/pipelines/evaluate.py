import logging
from distutils.util import strtobool

from kiwi.cli.better_argparse import PipelineParser
from kiwi.lib import evaluate

logger = logging.getLogger(__name__)


def evaluate_opts(parser):
    #Evaluation options

    group = parser.add_argument_group('Evaluation of WMT Quality Estimation')

    group.add_argument(
        '--type',
        help='Input type for prediction file',
        choices=['probs', 'tags'],
        type=str,
        default='probs',
    )
    group.add_argument(
        '--format',
        help='Input format for gold files',
        choices=['wmt17', 'wmt18'],
        type=str,
        default='wmt17',
    )
    group.add_argument(
        '--pred-format',
        help='Input format for predicted files. Defaults to the same as '
        '--format.',
        choices=['wmt17', 'wmt18'],
        type=str,
        default='wmt18',
    )
    group.add_argument(
        '--sents-avg',
        help='Obtain scores for sentences by averaging over tags or '
        'probabilities.',
        choices=['probs', 'tags'],
        type=str,
        # default=None
    )

    # Gold files.
    group.add_argument(
        '--gold-sents',
        help='Sentences gold standard. ',
        type=PathType(exists=True),
        required=False,
    )
    group.add_argument(
        '--gold-target',
        help='Target tags gold standard, or target and gaps '
        'if format == "wmt18".',
        type=PathType(exists=True),
        required=False,
    )
    group.add_argument(
        '--gold-source',
        help='Source tags gold standard.',
        type=PathType(exists=True),
        required=False,
    )
    group.add_argument(
        '--gold-cal',
        help='Target Tags to calibrate.',
        type=PathType(exists=True),
        required=False,
    )

    # Prediction Files
    group.add_argument(
        '--input-dir',
        help='Directory with prediction files generated by predict pipeline. '
        'Setting this argument will evaluate all predictions for '
        'which a gold file is set.',
        nargs='+',
        type=PathType(exists=True),
        # required=True
    )
    group.add_argument(
        '--pred-sents',
        help='Sentences HTER predictions.',
        type=PathType(exists=True),
        nargs='+',
        required=False,
    )
    group.add_argument(
        '--pred-target',
        help='Target predictions; can be tags or probabilities (of BAD). '
        'See --type.',
        type=PathType(exists=True),
        nargs='+',
        required=False,
    )
    group.add_argument(
        '--pred-gaps',
        help='Gap predictions; can be tags or probabilities (of BAD). '
        '(see --type). Use this option for files that only contain gap '
        'tags.',
        type=PathType(exists=True),
        nargs='+',
        required=False,
    )
    group.add_argument(
        '--pred-source',
        help='Source predictions. can be tags or probabilities (of BAD). '
        ' See --type.',
        type=PathType(exists=True),
        nargs='+',
        required=False,
    )
    group.add_argument(
        '--pred-cal',
        help='Target Predictions to calibrate.',
        type=PathType(exists=True),
        required=False,
    )

def build_parser():
    return PipelineParser(
        name='evaluate',
        options_fn=evaluate_opts,
    )

def main(argv=None):
    parser = build_parser()
    options = parser.parse(args=argv)
    evaluate.evaluate_from_options(options)


if __name__ = '__main__':
    main()
